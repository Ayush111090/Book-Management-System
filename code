-- ------------------------------------- 
### [Book Management System] 
-- ------------------------------------- 

### commands and concepts used
-- -------------------------------------- 
-- 1.DDL- create, alter,drop, truncate
-- 2.DML- insert, update, delete
-- 3.DQL- select
-- 4.DCL- grant, revoke
-- 5.TCL- commit, rollback
-- 6.Aggregate Functions and Joins 
-- 7.subquery
-- 8.view
-- 9.CTE
-- ----------------------------------------- 

# create the database 
CREATE DATABASE Book_Management_System; 
USE Book_Management_System; 

# DDL (Data Definition Language)
-- Create the Authors table 
CREATE TABLE Authors ( 
AuthorID INT PRIMARY KEY AUTO_INCREMENT, 
FirstName VARCHAR(255) NOT NULL, 
LastName VARCHAR(255) NOT NULL, 
Nationality VARCHAR(100) 
);
-- Create the Genres table 
CREATE TABLE Genres ( 
GenreID INT PRIMARY KEY AUTO_INCREMENT, 
GenreName VARCHAR(100) UNIQUE NOT NULL 
);
-- Create the Books table 
CREATE TABLE Books ( 
BookID INT PRIMARY KEY AUTO_INCREMENT, 
Title VARCHAR(255) NOT NULL, 
AuthorID INT, 
GenreID INT, 
PublicationYear INT, 
Price DECIMAL(10, 2), 
StockQuantity INT, 
FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID), 
FOREIGN KEY (GenreID) REFERENCES Genres(GenreID) 
);
-- Create the Customers table 
CREATE TABLE Customers ( 
CustomerID INT PRIMARY KEY AUTO_INCREMENT, 
FirstName VARCHAR(255) NOT NULL, 
LastName VARCHAR(255) NOT NULL, 
Email VARCHAR(255) UNIQUE, 
PhoneNumber VARCHAR(20) 
); 
-- Create the Orders table 
CREATE TABLE Orders ( 
OrderID INT PRIMARY KEY AUTO_INCREMENT, 
CustomerID INT, 
OrderDate DATETIME DEFAULT CURRENT_TIMESTAMP, 
TotalAmount DECIMAL(10, 2), 
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) 
); 
-- Create the OrderDetails table 
CREATE TABLE OrderDetails ( 
OrderDetailID INT PRIMARY KEY AUTO_INCREMENT, 
OrderID INT, 
BookID INT, 
Quantity INT, 
Price DECIMAL(10, 2), 
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), 
FOREIGN KEY (BookID) REFERENCES Books(BookID) 
); 

# DML (Data Manipulation Language)

-- Insert Authors 
INSERT INTO Authors (FirstName, LastName, Nationality) VALUES 
('Jane', 'Austen', 'British'), 
('George', 'Orwell', 'British'), 
('Harper', 'Lee', 'American'), 
('J.R.R.', 'Tolkien', 'British');

-- Insert Genres 
INSERT INTO Genres (GenreName) VALUES 
('Fiction'), 
('Science Fiction'), 
('Classic'), 
('Fantasy'); 

-- Insert Books 
INSERT INTO Books (Title, AuthorID, GenreID, PublicationYear, Price, StockQuantity) VALUES 
('Pride and Prejudice', 1, 3, 1813, 15.99, 50), 
('1984', 2, 2, 1949, 12.50, 30), 
('To Kill a Mockingbird', 3, 3, 1960, 18.75, 40), 
('The Hobbit', 4, 4, 1937, 20.00, 25); 

-- Insert Customers 
INSERT INTO Customers (FirstName, LastName, Email, PhoneNumber) VALUES 
('Alice', 'Smith', 'alice@example.com', '123-456-7890'), 
('Bob', 'Johnson', 'bob@example.com', '987-654-3210'); -- Insert Orders and OrderDetails (examples) -- Order 1: 
INSERT INTO Orders (CustomerID, TotalAmount) VALUES (1, 38.74); 
INSERT INTO OrderDetails (OrderID, BookID, Quantity, Price) VALUES (1, 1, 1, 15.99), (1, 2, 1, 12.50), 
(1, 4, 0.5, 10.25); 

-- Order 2: 
INSERT INTO Orders (CustomerID, TotalAmount) VALUES (2, 20.00); 
INSERT INTO OrderDetails (OrderID, BookID, Quantity, Price) VALUES (2, 4, 1, 20.00); 

# DCL (Data Control Language) 
-- Example: GRANT and REVOKE 
-- GRANT SELECT ON Books TO 'root@localhost';
-- REVOKE INSERT ON Books FROM 'root@localhost'; 

# TCL (Transaction Control Language)
-- Example: SAVEPOINT, ROLLBACK, and COMMIT 
START TRANSACTION; 
SAVEPOINT S1; 
UPDATE Books SET StockQuantity = StockQuantity + 1 WHERE BookID = 1;
-- ROLLBACK TO SAVEPOINT S1;                -- Uncomment to rollback the update 
command 
COMMIT;

# Aggregate Functions and Joins
-- Example: Total sales per genre 

SELECT g.GenreName, SUM(od.Price * od.Quantity) AS TotalSales 
FROM Genres g 
JOIN Books b ON g.GenreID = b.GenreID 
JOIN OrderDetails od ON b.BookID = od.BookID 
GROUP BY g.GenreName; 

#Subquery 
-- Example: Find authors who have books in the "Fantasy" genre 

SELECT FirstName, LastName 
FROM Authors 
WHERE AuthorID IN ( 
SELECT AuthorID 
FROM Books 
WHERE GenreID = (SELECT GenreID FROM Genres WHERE GenreName = 'Fantasy') 
); -- Example: Find Customers who have placed orders above the average order total. 
SELECT FirstName, LastName 
FROM Customers 
WHERE CustomerID IN ( 
SELECT CustomerID 
FROM Orders 
WHERE TotalAmount > (SELECT AVG(TotalAmount) FROM Orders) 
); 

# Views 
-- Example: View for book details with author and genre names 

CREATE VIEW BookDetailsView AS 
SELECT b.BookID, b.Title, a.FirstName, a.LastName, g.GenreName, b.PublicationYear, b.Price, 
b.StockQuantity 
FROM Books b 
JOIN Authors a ON b.AuthorID = a.AuthorID 
JOIN Genres g ON b.GenreID = g.GenreID; 

# Stored Procedure 
-- Example: Stored procedure to add a new book 

DELIMITER // 
CREATE PROCEDURE AddNewBook( 
IN bookTitle VARCHAR(255), 
IN authorID INT, 
IN genreID INT, 
IN pubYear INT, 
IN bookPrice DECIMAL(10, 2), 
IN stock INT 
) 
BEGIN 
INSERT INTO Books (Title, AuthorID, GenreID, PublicationYear, Price, StockQuantity) 
VALUES ( title, authorID, genreID, pubYear, bookPrice, stock); 
END // 
DELIMITER ;
-- Call the stored procedure
-- CALL AddNewBook('New Book Title', 1, 1, 2023, 10.00, 100); 
-- OR press the thunder icon at the right side of the stored procedure created. 

# CTE (Common Table Expression) 
-- Example: CTE to find books with above average price 

WITH AveragePrice AS ( 
SELECT AVG(Price) AS AvgPrice 
FROM Books 
) 
SELECT Title, Price 
FROM Books, AveragePrice 
WHERE Price > AveragePrice.AvgPrice; 
